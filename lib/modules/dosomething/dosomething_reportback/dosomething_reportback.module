<?php
/**
 * @file
 * Code for the DoSomething Reportback feature.
 */
define('DOSOMETHING_REPORTBACK_LOG', variable_get('dosomething_reportback_log') ? TRUE : FALSE);

module_load_include('php', 'dosomething_api', 'includes/ApiCache');

include_once 'dosomething_reportback.features.inc';
include_once 'dosomething_reportback.forms.inc';
include_once 'dosomething_reportback.theme.inc';
include_once 'dosomething_reportback.cron.inc';
include_once 'dosomething_reportback.query.inc';
include_once 'dosomething_reportback_item.query.inc';

include_once 'includes/Reportback.php';
include_once 'includes/ReportbackController.php';
include_once 'includes/ReportbackTransformer.php';
include_once 'includes/ReportbackItem.php';
include_once 'includes/ReportbackItemController.php';
include_once 'includes/ReportbackItemTransformer.php';

/**
 * Implements hook_entity_info().
 *
 * @return array
 */
function dosomething_reportback_entity_info() {
  $info = [];

  $info['reportback'] = [
    'label' => t('Reportback'),
    'base table' => 'dosomething_reportback',
    'entity keys' => [
      'id' => 'rbid',
      'label' => 'rbid',
    ],
    'entity class' => 'Reportback',
    'uri callback' => 'entity_class_uri',
    'controller class' => 'ReportbackController',
    'module' => 'dosomething_reportback',
    'views controller class' => 'EntityDefaultViewsController',
  ];

  $info['reportback_item'] = [
    'label' => t('Reportback Item'),
    'base table' => 'dosomething_reportback_file',
    'entity keys' => [
      'id' => 'fid',
      'label' => 'fid',
    ],
    'entity class' => 'ReportbackItem',
    'uri callback' => 'entity_class_uri',
    'controller class' => 'ReportbackItemController',
    'module' => 'dosomething_reportback',
    'views controller class' => 'EntityDefaultViewsController',
    'view modes' => [
      'full' => [
        'label' => t('Full'),
        'custom settings' =>  FALSE,
      ],
      'teaser' => [
        'label' => t('Teaser'),
        'custom settings' =>  FALSE,
      ],
    ]
  ];

  return $info;
}


/**
 * Implements hook_entity_property_info().
 */
function dosomething_reportback_entity_property_info() {
  $info = array();

  // Set Reportback properties.
  $info['reportback']['properties']['rbid'] = array(
    'label' => t('Reportback rbid'),
    'description' => t('The unique ID of the reportback.'),
    'type' => 'integer',
    'schema field' => 'rbid',
    'entity views field' => TRUE,
  );
  $info['reportback']['properties']['nid'] = array(
    'label' => t('Node nid'),
    'description' => t('The node nid of the reportback.'),
    'type' => 'node',
    'schema field' => 'nid',
    'required' => TRUE,
    'entity views field' => TRUE,
    'setter callback' => 'entity_property_verbatim_set',
  );
  $info['reportback']['properties']['uid'] = array(
    'label' => t('User uid'),
    'description' => t('The user uid of the reportback.'),
    'type' => 'user',
    'schema field' => 'uid',
    'required' => TRUE,
    'entity views field' => TRUE,
    'setter callback' => 'entity_property_verbatim_set',
  );
  $info['reportback']['properties']['created'] = array(
    'label' => t('Created Date'),
    'description' => t('Date the reportback was created.'),
    'type' => 'date',
    'required' => TRUE,
    'schema field' => 'created',
    'setter callback' => 'entity_property_verbatim_set',
  );
  $info['reportback']['properties']['updated'] = array(
    'label' => t('Last Updated'),
    'description' => t('Date the reportback was last updated.'),
    'type' => 'date',
    'required' => TRUE,
    'schema field' => 'updated',
    'setter callback' => 'entity_property_verbatim_set',
  );
  $info['reportback']['properties']['quantity'] = array(
    'label' => t('Quantity'),
    'description' => t('The number of reportback_nouns reportback_verbed.'),
    'type' => 'integer',
    'required' => TRUE,
    'schema field' => 'quantity',
    'setter callback' => 'entity_property_verbatim_set',
  );
  $info['reportback']['properties']['why_participated'] = array(
    'label' => t('Why Participated'),
    'description' => t('Why the user participated.'),
    'type' => 'text',
    'required' => TRUE,
    'schema field' => 'why_participated',
    'setter callback' => 'entity_property_verbatim_set',
  );
  $info['reportback']['properties']['flagged'] = array(
    'label' => t('Flagged status'),
    'description' => t('The boolean on the reportback, to show if entire rb is flagged'),
    'type' => 'text',
    'required' => TRUE,
    'schema field' => 'flagged',
    'setter callback' => 'entity_property_verbatim_set',
  );
  $info['reportback']['properties']['flagged_reason'] = array(
    'label' => t('Flagged Reason'),
    'description' => t('Why was the file flagged?'),
    'type' => 'text',
    'required' => TRUE,
    'schema field' => 'flagged_reason',
    'setter callback' => 'entity_property_verbatim_set',
  );
  $info['reportback']['properties']['promoted_reason'] = array(
    'label' => t('Promoted Reason'),
    'description' => t('Why was the file promoted?'),
    'type' => 'text',
    'required' => TRUE,
    'schema field' => 'promoted_reason',
    'setter callback' => 'entity_property_verbatim_set',
  );
  $info['reportback']['properties']['run_nid'] = array(
    'label' => t('Run NID'),
    'description' => t('The run this was apart of'),
    'type' => 'node',
    'schema field' => 'run_nid',
    'required' => TRUE,
    'entity views field' => TRUE,
    'setter callback' => 'entity_property_verbatim_set',
  );

  // Set Reportback File properties.
  $info['reportback_item']['properties']['rbid'] = array(
    'label' => t('Reportback File rbid'),
    'description' => t('The Reportback rbid the File belongs to.'),
    'type' => 'reportback',
    'schema field' => 'rbid',
    'required' => TRUE,
    'entity views field' => TRUE,
  );
  $info['reportback_item']['properties']['fid'] = array(
    'label' => t('Reportback file fid'),
    'description' => t('Unique file fid of the Reportback File.'),
    'type' => 'file',
    'schema field' => 'fid',
    'required' => TRUE,
    'entity views field' => TRUE,
    'setter callback' => 'entity_property_verbatim_set',
  );
  $info['reportback_item']['properties']['caption'] = array(
    'label' => t('Caption'),
    'description' => t('File caption.'),
    'type' => 'text',
    'required' => TRUE,
    'schema field' => 'caption',
    'setter callback' => 'entity_property_verbatim_set',
  );
  $info['reportback_item']['properties']['status'] = array(
    'label' => t('Status'),
    'description' => t('Review status.'),
    'type' => 'text',
    'required' => TRUE,
    'schema field' => 'status',
    'setter callback' => 'entity_property_verbatim_set',
  );
  $info['reportback_item']['properties']['reviewed'] = array(
    'label' => t('Reviewed'),
    'description' => t('Time reviewed.'),
    'type' => 'date',
    'required' => TRUE,
    'schema field' => 'status',
    'setter callback' => 'entity_property_verbatim_set',
  );
  return $info;
}


/**
 * Implements hook_menu().
 */
function dosomething_reportback_menu() {
  $items = array();
  // Admin Reportback configuration page.
  $items['admin/config/dosomething/dosomething_reportback'] = array(
    'title' => 'DoSomething Reportback',
    'description' => 'Admin form to set Reportback variables.',
    'page callback' => 'drupal_get_form',
    'page arguments' => array('dosomething_reportback_admin_config_form'),
    'access callback' => 'user_access',
    'access arguments' => array('administer modules'),
    'file' => 'dosomething_reportback.admin.inc',
  );
  if (variable_get('dosomething_reportback_is_generate_enabled', FALSE)) {
    $items['admin/config/dosomething/dosomething_reportback/generate'] = array(
      'title' => 'Generate Reportbacks',
      'description' => 'Admin form to generate Lorem ipsum Reportbacks.',
      'page callback' => 'drupal_get_form',
      'page arguments' => array('dosomething_reportback_admin_generate_form'),
      'access callback' => 'user_access',
      'access arguments' => array('administer modules'),
      'file' => 'dosomething_reportback.admin.inc',
    );
  }
  $items['reportback/failure/%'] = array(
    'title' => 'Reportback',
    'page callback' => 'dosomething_reportback_view_failure',
    'page arguments' => array(2),
    'access arguments' => array('access content'),
  );
  $items['reportback/%reportback'] = array(
    'title' => 'Reportback',
    'page callback' => 'dosomething_reportback_permalink_page',
    'page arguments' => array(1),
    //'access callback' => 'dosomething_reportback_access',
    'access arguments' => array('access content'),
  );
  $items['admin/reportback/%reportback'] = array(
    'title' => 'Reportback',
    'page callback' => 'dosomething_reportback_admin_view_entity',
    'page arguments' => array(2),
    // 'access callback' => 'dosomething_reportback_access',
    'access arguments' => array('view any reportback'),
  );
  $items['admin/users/rb'] = array(
    'title' => 'Reportbacks',
    'page callback' => 'dosomething_reportback_count_page',
    'access arguments' => array('view any reportback'),
    'file' => 'dosomething_reportback.admin.inc',
    'weight' => 900,
  );
  // Add Reportback menu items for taxonomy_term and node entities:
  $rb_paths = array(
    'taxonomy/term/%taxonomy_term' => 2,
    'node/%node' => 1,
  );
  foreach ($rb_paths as $rb_path => $arg_index) {
    $rb_items = dosomething_reportback_get_review_menu_items($rb_path, $arg_index);
    $items = array_merge($items, $rb_items);
  }

  $items['admin/users/rb/refresh-counts'] = array(
    'title' => 'Refresh Counts',
    'page callback' => 'drupal_get_form',
    'page arguments' => ['dosomething_reportback_admin_refresh_counts_form'],
    'access callback' => 'user_access',
    'access arguments' => ['edit any reportback'],
    'file' => 'dosomething_reportback.admin.inc',
    'type' => MENU_LOCAL_TASK,
    'weight' => 100,
  );
  $items['admin/users/rb/add'] = array(
    'title' => 'Add reportback',
    'page callback' => 'drupal_get_form',
    'page arguments' => array('dosomething_reportback_form'),
    'access callback' => 'user_access',
    'access arguments' => array('edit any reportback'),
    'type' => MENU_LOCAL_TASK,
    'weight' => 110,
  );
  $items['reportback/%reportback/edit'] = array(
    'title' => 'Edit',
    'page callback' => 'dosomething_reportback_edit_entity',
    'page arguments' => array(1),
    'access callback' => 'dosomething_reportback_access',
    'access arguments' => array('edit', 1),
    'type' => MENU_LOCAL_TASK,
    'weight' => 20,
  );
  $items['reportback/%reportback/delete'] = array(
    'title' => 'Delete',
    'page callback' => 'drupal_get_form',
    'page arguments' => array('dosomething_reportback_delete_form', 1),
    'access callback' => 'dosomething_reportback_access',
    'access arguments' => array('delete', 1),
    'type' => MENU_LOCAL_TASK,
    'weight' => 30,
  );
  return $items;
}


/**
 * Returns array of menu items for given $prefix.
 *
 * @param string $prefix
 *   The URL prefix to use for this set of Review menu items.
 * @param int $arg_index
 *   The index of the argument of the loaded entity.
 *
 * @return array
 */
function dosomething_reportback_get_review_menu_items($prefix, $arg_index) {
  // Append /rb path to the given $prefix.
  $prefix .= '/rb';
  // Creates the parent tab.
  $items[$prefix] = array(
    'title' => 'Reportbacks',
    'page callback' => 'drupal_get_form',
    'page arguments' => array('dosomething_reportback_files_form', 'pending', $arg_index),
    'access callback' => 'dosomething_reportback_review_page_access',
    'access arguments' => array($arg_index),
    'file' => 'dosomething_reportback.admin.inc',
    'type' => MENU_LOCAL_TASK,
    'weight' => 900,
  );
  $items[$prefix . '/inbox'] = array(
    'title' => 'Inbox',
    'page callback' => 'drupal_get_form',
    'page arguments' => array('dosomething_reportback_files_form', 'pending', $arg_index),
    'access callback' => 'dosomething_reportback_review_page_access',
    'access arguments' => array($arg_index),
    'file' => 'dosomething_reportback.admin.inc',
    'type' => MENU_DEFAULT_LOCAL_TASK,
    'weight' => 10,
  );
  return $items;
}


/**
 * Access callback for entity reportback review page.
 *
 * @param object $entity
 *   Loaded entity to inspect whether or not to display the RB Review page for.
 *
 * @return bool
 */
function dosomething_reportback_review_page_access($entity) {
  if (!user_access('view any reportback')) {
    return FALSE;
  }
  // If no entity was passed, that's fine -- we'll display all reportbacks.
  if ($entity == NULL) {
    return TRUE;
  }
  // Is this a node?
  if (isset($entity->nid)) {
    if ($entity->type == 'campaign_run') {
      return TRUE;
    }
    if ($entity->type == 'campaign') {
      return dosomething_campaign_get_campaign_type($entity) == 'campaign';
    }
    return FALSE;
  }
  // Is it a taxonomy term?
  elseif (isset($entity->tid)) {
    return TRUE;
  }
  // Don't display reportback tabs for other entities that may call this.
  return FALSE;
}


/**
 * Implements hook_admin_paths().
 */
function dosomething_reportback_admin_paths() {
  $paths = array(
    'node/*/rb*' => TRUE,
    'admin/reportback/*' => TRUE,
    'taxonomy/term/*/rb*' => TRUE,
  );
  return $paths;
}


/**
 * Access callback for reportback entity operations.
 */
function dosomething_reportback_access($op, $entity, $account = NULL) {
  global $user;
  if (empty($entity)) {
    return FALSE;
  }
  if (!isset($account)) {
    $account = $user;
  }
  $perm_any = $op . ' any reportback';
  $perm_own = $op . ' own reportback';
  if (user_access($perm_any, $account)){
    return TRUE;
  }
  // Check that user has access to $op own, and is the author.
  return user_access($perm_own, $account) && $account->uid == $entity->uid;
}


/**
 * Implements hook_permission().
 */
function dosomething_reportback_permission() {
  return array(
    'delete any reportback' => array(
      'title' => t('Delete any reportback'),
    ),
    'delete own reportback' => array(
      'title' => t('Delete own reportback'),
    ),
    'edit any reportback' => array(
      'title' => t('Edit any reportback'),
    ),
    'edit own reportback' => array(
      'title' => t('Edit own reportback'),
    ),
    'view any reportback' => array(
      'title' => t('View any reportback'),
    ),
    'view own reportback' => array(
      'title' => t('View own reportback'),
    ),
  );
}


/**
 * Menu autoloader for /reportback.
 *
 */
function reportback_load($id) {
  $reportback = entity_load('reportback', array($id));
  return array_pop($reportback);
}


/**
 * Menu autoloader for /reportback.
 */
function reportback_file_load($fid) {
  $reportback_file = entity_load('reportback_item', array($fid));
  return array_pop($reportback_file);
}


/**
 * Callback for /reportback/ID page.
 */
function dosomething_reportback_admin_view_entity($entity) {
  return entity_view('reportback', array($entity->rbid => $entity), 'full');
}


/**
 * Returns all copy variables set on the permalink page.
 */
function _dosomething_reportback_get_permalink_copy_vars($user) {
  if (!$user->field_first_name ) {
    $user->field_first_name[LANGUAGE_NONE][0]['value'] = t('your friend');
  }
  $first_name = dosomething_helpers_extract_field_data($user->field_first_name, LANGUAGE_NONE);

  if (strpos($first_name, '@') !== FALSE) {
    $non_owners_title = t(variable_get('dosomething_campaign_permalink_nonowners_page_title_backup', ''));
  }
  else {
    $non_owners_title = token_replace(t(variable_get('dosomething_campaign_permalink_nonowners_page_title', '')), array('user' => $user));
  }

  return array(
    'owners_rb_subtitle' => t(variable_get('dosomething_campaign_permalink_confirmation_owners_page_subtitle', '')),
    'owners_rb_scholarship' => t(variable_get('dosomething_campaign_permalink_confirmation_owners_scholarship', '')),
    'owners_rb_important' => t(variable_get('dosomething_campaign_permalink_confirmation_owners_important_to_you', '')),
    'owners_rb_social_cta' => t(variable_get('dosomething_campaign_permalink_confirmation_owners_social_cta', '')),
    'owners_title' => t(variable_get('dosomething_campaign_permalink_owners_page_title', '')),
    'owners_subtitle' => t(variable_get('dosomething_campaign_permalink_owners_page_subtitle', '')),
    'non_owners_title' => $non_owners_title,
    'non_owners_closed_cta' => t(variable_get('dosomething_campaign_permalink_nonowners_closed_cta', '')),
    'non_owners_closed_button' => t(variable_get('dosomething_campaign_permalink_nonowners_closed_button_copy', '')),
  );
}

/**
 * Implements hook_form_alter().
 *
 * Alters the signup form that is attached to permalink pages.
 */
function dosomething_reportback_form_alter(&$form, &$form_state, $form_id) {
  // A signup/login/register form, on a reportback page.
  $forms = array('dosomething_signup_form', 'user_register_form', 'user_login', 'user_login_block');
  if (in_array($form_id, $forms) && drupal_match_path($path = current_path(), 'reportback/*')) {
    $form['#submit'][] = 'dosomething_reportback_signup_submit';
  }
}

function dosomething_reportback_permalink_page($rbid) {
  $fid = $_GET['fid'];
  $vars = [];

  if (variable_get('rogue_collection', FALSE)) {
    $rogue = dosomething_rogue_client();
    $response = $rogue->get('v1/reportbacks/' . $rbid);

    $vars = [
      // @TODO: Make this look the same as the one below, but using Rogue's response.
      'rb' => $rb,
      'reportback' => $entity,
      'node' => $node,
      'user' => $rb_simple_user,
      'is_owner' => $is_owner,
      'copy_vars' => $copy_vars,
      'title' => $title,
      'subtitle' => $subtitle,
      'share_bar' => $share_bar,
      'share_enabled' => $share_enabled,
      'why_participated_short' => isset($why_participated_short) ? $why_participated_short : $participated_copy,
    ];
  } else {
    $entity = entity_load('reportback', $rbid);
    $vars = dosomething_reportback_permalink_vars_from_entity($entity);
  }

  return theme('reportback_permalink', $vars);
}

/**
 * Callback for /rbf/FID page.
 */
function dosomething_reportback_view_entity($entity) {
  $rb_simple_user = dosomething_user_get_simple_user($rb_user = user_load($entity->uid));
  global $user;

  $is_owner = ($user->uid == $rb_simple_user->uid) ? 1 : 0;
  $fid = $_GET['fid'];

  if (!$fid) {
    // Get the most recently uploaded item.
    $fid = array_pop($entity->fids);
  }

  // Try to get the permalink from cache.
  if ($cached_permalink = cache_get('ds_permalink_' . $entity->rbid . '_' . $fid . '_' . $is_owner, 'cache_dosomething_reportback')) {
    $permalink_vars = $cached_permalink->data;
  }
  else {
    // Additional reportback file specific data.
    $file = reportback_file_load($fid);

    // Deny access to files uploaded to other reportbacks.
    if ($file->rbid !== $entity->rbid) {
      drupal_access_denied();
      return FALSE;
    }

    $rb['image'] = $file->getImage('480x480');
    $rb['caption'] = $file->caption;
    $node = dosomething_campaign_load(node_load($entity->nid));

    $copy_vars = _dosomething_reportback_get_permalink_copy_vars($rb_user);

    $incentive = ($node->scholarship) ? $copy_vars['owners_rb_scholarship'] : "";
    $title = ($is_owner) ? $copy_vars['owners_title'] : $copy_vars['non_owners_title'];
    $subtitle = ($is_owner) ? $copy_vars['owners_rb_subtitle'] . " " . $incentive : $node->call_to_action;
    $link = '/' . drupal_get_path_alias('node/' . $node->nid);

    $character_limit = 250;
    $participated_copy = $entity->why_participated;

    if (strlen($participated_copy) > $character_limit) {
      $why_participated_short = dosomething_helpers_text_truncate($participated_copy, $character_limit, '...', FALSE, FALSE);
    }

    $reportback_url = url(current_path(), array('absolute' => TRUE, 'query' => array('fid' => $fid)));

    $share_text = token_replace(t(variable_get('dosomething_campaign_permalink_confirmation_owners_social_network_copy')), array('node' => $node));
    $share_text = str_replace('[node:issue]', strtolower($node->issue['name']), $share_text);

    $share_types = array(
      'facebook' => array(
        'type' => 'feed_dialog',
        'parameters' => array(
          'picture' => $file->getImageURL('480x480'),
          'caption' => $node->call_to_action,
        ),
      ),
      'twitter' => array(
        'tweet' => htmlspecialchars_decode($share_text, ENT_QUOTES) . " ",
      ),
      'tumblr' => array(
        'posttype' => 'photo',
        'content' => $file->getImageURL('480x480'),
        'caption' => $share_text . " ",
      ),
    );

    $share_bar = dosomething_helpers_share_bar($reportback_url, $share_types, 'Confirmation Page', 'cta__actions');

    $share_enabled = variable_get('dosomething_reportback_display_permalink_share', '');

    $permalink_vars = array(
      'rb' => $rb,
      'reportback' => $entity,
      'node' => $node,
      'user' => $rb_simple_user,
      'is_owner' => $is_owner,
      'copy_vars' => $copy_vars,
      'title' => $title,
      'subtitle' => $subtitle,
      'share_bar' => $share_bar,
      'share_enabled' => $share_enabled,
      'why_participated_short' => isset($why_participated_short) ? $why_participated_short : $participated_copy,
    );

    cache_set('ds_permalink_' . $entity->rbid . '_' . $fid . '_' . $is_owner, $permalink_vars, 'cache_dosomething_reportback');
  }
  // Don't ever cache the signup button, as this changes/blocks submission.
  if($node->status == 'closed') {
    $signup = l($copy_vars['non_owners_closed_button'], 'campaigns', array('attributes' => array('class' => array('button'))));
  }
  else {
    $signup = dosomething_signup_get_signup_button('Sign Up', $entity->nid, 'dosomething_signup_form');
  }
  $permalink_vars['signup_button'] = $signup;

  // Don't ever cache Kudos, or it won't reflect state changes.
  if (! dosomething_kudos_disable_reactions($entity->nid)) {
    $permalink_vars['kudos'] = dosomething_kudos_get_kudos_data_for_fid($fid);
  }

  return $permalink_vars;
}

/**
 * Callback for /reportback/failure page.
 *
 * We hit this when a reportback sent to Rogue fails to send back to Phoenix
 */
function dosomething_reportback_view_failure($nid) {
  // Get the user in all the forms that we need
  global $user;
  $rb_simple_user = dosomething_user_get_simple_user($user);

  // Load the campaign node so we can find out its name, if there's a scholarship, etc.
  $node = dosomething_campaign_load(node_load($nid));

  // Get all the copy and allow admins to build a link to the user's profile
  $copy_vars = _dosomething_reportback_get_permalink_copy_vars($user);
  $failure_copy = token_replace(t(variable_get('dosomething_campaign_permalink_failure_copy', '')), ['user' => $user]);
  $incentive = ($node->scholarship) ? $copy_vars['owners_rb_scholarship'] : "";

  // Get the image
  $fail_image = dosomething_image_get_themed_image(variable_get('dosomething_campaign_permalink_failure_image_nid'), 'square', '480x480');

  $permalink_fail_vars = [
    'user' => $rb_simple_user,
    'copy_vars' => $copy_vars,
    'title' => $copy_vars['owners_title'],
    'subtitle' => $copy_vars['owners_rb_subtitle'] . " " . $incentive,
    'node' => $node,
    'failure_copy' => $failure_copy,
    'fail_image' => $fail_image,
  ];

  return theme('reportback_rogue_fail_permalink', $permalink_fail_vars);
}

/**
 * Custom submit handler for signup form.
 * @see dosomething_reportback_form_alter().
 */
function dosomething_reportback_signup_submit(&$form, &$form_state) {
  // Add a redirect to the campaign node.
  if (isset($form['nid']['#value'])) {
    $nid = $form['nid']['#value'];
    $form_state['redirect'] = drupal_get_path_alias('node/' . $nid);
  }
}


/**
 * Process variables for entity.tpl.php.
 *
 * @see template_preprocess_entity in Entity API module.
 */
function dosomething_reportback_preprocess_entity(&$variables) {
  if ($variables['elements']['#entity_type'] == 'reportback' && $variables['view_mode'] == 'full') {
    // Enables reportback.tpl.php naming suggestion.
    $variables['theme_hook_suggestions'][] = 'reportback';
    $entity = $variables['elements']['#entity'];
  }
}


/**
 * Callback for /reportback/ID/edit page.
 */
function dosomething_reportback_edit_entity($entity) {
  return drupal_get_form('dosomething_reportback_form', $entity);
}


/**
 * Deletes a reportback entity.
 *
 * @param int $rbid
 *   Reportback rbid to delete.
 *
 * @return
 *   FALSE, if error.
 */
function dosomething_reportback_delete_reportback($rbid) {
  return entity_delete('reportback', $rbid);
}

/**
 * Checks if a reportback exists for given $nid and $uid.
 *
 * @param  int  $nid
 *   The node nid of the reportback to check.
 * @param  int  $run_nid
 *   The run nid of the reportback record to check.
 * @param  int  $uid
 *   Optional - the user uid of reportback to check.
 *   If not given, uses global $user->uid.
 * @param int $northstar_id
 *   Optional - the user's Northstar id of reportback to check.
 * @return mixed
 *   The rbid of reportback or FALSE if it doesn't exist.
 */
function dosomething_reportback_exists($nid, $run_nid = NULL, $uid = NULL, $northstar_id = NULL) {
  if ($northstar_id) {
    $user = dosomething_northstar_get_user($northstar_id);
    $uid = $user->drupal_id;
  }
  else if (!isset($uid)) {
    global $user;
    $uid = $user->uid;
  }
  else {
    $user = user_load($uid);
  }

  if (!isset($run_nid)) {
    $run = dosomething_helpers_get_current_campaign_run_for_user($nid, $user);
    $run_nid = $run->nid;
  }

  $result = db_select('dosomething_reportback', 'r')
    ->condition('uid', $uid)
    ->condition('nid', $nid)
    ->condition('run_nid', $run_nid)
    ->fields('r', ['rbid'])
    ->execute();

  $rbid = $result->fetchField(0);

  // If a rbid was found, return it.
  if (is_numeric($rbid)) {
    return $rbid;
  }

  return FALSE;
}


/**
 * Saves a reportback entity with given values.
 *
 * @param  array  $values
 *   The reportback entity values to save.
 *   If the rbid is set to 0, a new entity will be saved.
 *   Otherwise if a numeric rbid is passed, the entity will be updated.
 * @param  object|null  $user
 * @return mixed
 *   The reportback entity rbid if success, or FALSE if error.
 */
function dosomething_reportback_save($values, $user = NULL) {
  if (!isset($user)) {
    global $user;
  }

  $values['why_participated'] = dosomething_helpers_remove_emoji_from_string($values['why_participated']);
  $values['caption'] = dosomething_helpers_remove_emoji_from_string($values['caption']);

  $campaign = Campaign::get($values['nid']);
  $run = dosomething_helpers_get_current_campaign_run_for_user($values['nid'], $user, $campaign);

  $values['run_nid'] = $run->nid;

  if ($values['rbid'] === 0) {
    $entity = entity_create('reportback', ['nid' => $values['nid']]);
  }
  else {
    $entity = entity_load_single('reportback', $values['rbid']);
    $most_recently_added_fid = end($entity->fids);

    if ($values['fid'] == $most_recently_added_fid) {
      $reportback_item = entity_load_single('reportback_item', $values['fid']);
    }
  }

  try {
    // Set entity properties.
    dosomething_reportback_set_properties($entity, $values);

    if (isset($reportback_item)) {
      // Set entity files and save reportback item.
      dosomething_reportback_set_files($reportback_item, $values);
      $reportback_item->save();
    }
    else {
      dosomething_reportback_set_files($entity, $values);
    }
    // Save the entity.
    $entity->save();
    if (isset($entity->rbid)) {
      cache_clear_all('ds_permalink_' .$entity->rbid, 'cache_dosomething_reportback', TRUE);
      // Return reportback rbid.
      return $entity->rbid;
    }
    return FALSE;
  }
  catch (Exception $e) {
    watchdog('dosomething_reportback', $e, array(), WATCHDOG_ERROR);
    return FALSE;
  }
}


/**
 * Sets a reportback entity's properties.
 *
 * @param object $entity
 *   The reportback entity to set properties for.
 * @param array $values
 *   Associative of property values to set, with property name as keys.
 */
function dosomething_reportback_set_properties(&$entity, $values) {
  // List all possible entity properties to write.
  $properties = array(
    'uid',
    'nid',
    'run_nid',
    'quantity',
    'why_participated',
    'num_participants',
  );

  // For each of them:
  foreach ($properties as $property) {
    // If we have a value set for this property.
    if (isset($values[$property])) {
      // Set safe property value in wrapper.
      $entity->{$property} = filter_xss($values[$property], array());
    }
  }
}


/**
 * Sets a reportback entity's file and caption.
 *
 * @param object $entity
 *   The reportback entity to set properties for.
 * @param array $values
 *   An array of Reportback File data to set.
 */
function dosomething_reportback_set_files(&$entity, $values) {
  if (isset($values['fid']) && !empty($values['fid'])) {
    $entity->fid = $values['fid'];

    if (!empty($values['caption'])) {
      $entity->caption = filter_xss($values['caption'], array());
    }

    if (!empty($values['source'])) {
      $entity->source = filter_xss($values['source'], array());
    }

    if (!empty($values['remote_addr'])) {
      $entity->remote_addr = filter_xss($values['remote_addr'], array());
    }
  }
}

function dosomething_reportback_views_pre_render(&$view) {
  // Scope this to the reportback files node view.
  if ($view->name === 'reportback_files' && arg(0) === 'node') {
    $nid = $view->args[0];
    $quantity = dosomething_reportback_get_reportback_total_plus_override($nid);
    // Add total quantity to view.
    $view->attachment_before = '<h2> Total reportback quantity: ' . $quantity . '</h2>';
  }
}


/**
 * Saves a reportback file for a given $uid and $nid from file $url.
 *
 * @param int $nid
 *   The node nid that this reportback file is associated with.
 * @param int $uid
 *   The users uid that this reportback file is associated with.
 * @param string $url
 *   The url of the file to save.
 *
 * @return mixed
 *   A file object if save is successful, FALSE if not.
 */
function dosomething_reportback_save_file_from_url($nid, $uid, $url) {
  if (DOSOMETHING_REPORTBACK_LOG) {
    watchdog('dosomething_reportback', 'Save file from url: '. $url);
  }
  // Get the location for where file should be saved to.
  $dest = dosomething_reportback_get_file_dest(basename($url), $nid, $uid);
  if (DOSOMETHING_REPORTBACK_LOG) {
    watchdog('dosomething_reportback', 'Write to dest: '. $dest);
  }
  // Download and save file to that location.
  $file_contents = file_get_contents($url);
  $file = file_save_data($file_contents, $dest);
  // Save UID and permanent status.
  $file->uid = $uid;
  $file->status = FILE_STATUS_PERMANENT;
  file_save($file);
  if (DOSOMETHING_REPORTBACK_LOG) {
    watchdog('dosomething_reportback', json_encode($file));
  }
  return $file;
}


/**
 * Returns the file destination for a new reportback file for given node $nid.
 *
 * @param string $filename
 *   Original upload filename, used to retain the file extension.
 * @param int $nid
 *   The node nid that this reportback is associated with.
 * @param int $uid
 *   The users uid that this reportback is associated with.
 *
 * @return string
 *   The file destination path to write the next reportback image to.
 */
function dosomething_reportback_get_file_dest($name, $nid, $uid = NULL) {
  if (!isset($uid)) {
    global $user;
    $uid = $user->uid;
  }
  else {
    $user = user_load($uid);
  }

  $run = dosomething_helpers_get_current_campaign_run_for_user($nid, $user);
  $run_nid = $run->nid;

  // Parse original filename.
  $pathinfo = pathinfo($name);
  $ext = 'jpg';

  // Save its extension.
  if (isset($pathinfo['extension'])) {
    $ext = $pathinfo['extension'];
  }

  // Define reportback nid file directory.
  $dir = 'public://reportbacks/' . $nid;

  // If directory doesn't exist / can't be created:
  if (!file_prepare_directory($dir, FILE_CREATE_DIRECTORY)) {
    // Use default public directory instead.
    $dir = 'public://';
  }

  $index = 0;

  if ($rb = dosomething_reportback_exists($nid, $run_nid, $uid)) {
    $reportback = reportback_load($rb);
    $index = count($reportback->fids);
  }

  $filename = 'uid_' . $uid . '-nid_' . $nid . '-run_nid_' . $run_nid . '-' . $index . '.' . $ext;

  return $dir . '/' . $filename;
}


/**
 * Sends mbp request for a reportback.
 */
function dosomething_reportback_mbp_request($entity) {
  // This fid is the last file uploaded to the reportback.
  // @see Reportback->save().
  $inserted_fid = $entity->fid;
  $image_markup = dosomething_image_get_themed_image_by_fid($inserted_fid, '300x300');

  if (module_exists('dosomething_user')) {
    $account = user_load($entity->uid);
    $node = node_load($entity->nid);
    $language = dosomething_global_get_language($account, $node);
    $campaign_language = !empty($node->language) ? $node->language : DOSOMETHING_GLOBAL_DEFAULT_LANG_CODE;
    $campaign_country = dosomething_global_get_current_country_code();

    $title = $entity->node_title;
    if ($node) {
      // Get node title, normal for collections, translatable for campaigns.
      if (isset($node->title_field)) {
        $wrapper = entity_metadata_wrapper('node', $node);
        $title = $wrapper->language($language)->title_field->value();
      } else {
        $title = $node->title;
      }
    } else {
      watchdog(
        'dosomething_reportback',
        'Node !nid !nid not found for reportback fid !fid.',
        ['!nid' => $entity->nid, '!fid' => $entity->fid],
        WATCHDOG_WARNING
      );
    }

    $params = array(
      'email' => $account->mail,
      'uid' => $account->uid,
      'first_name' => dosomething_user_get_field('field_first_name', $account),
      'mobile' => dosomething_user_get_field('field_mobile', $account),
      'campaign_title' => $title,
      'event_id' => $entity->nid,
      'impact_verb' => $entity->verb,
      'impact_number' => $entity->quantity,
      'impact_noun' => $entity->noun,
      'image_markup' => $image_markup,
      'campaign_language' => $campaign_language,
      'campaign_country' => $campaign_country,
    );

    if (module_exists('dosomething_mbp')) {
      dosomething_mbp_request('campaign_reportback', $params);
    }
  }
}


/**
 * Returns array of Reportback rbid's for a given User $uid.
 *
 * @param int $uid
 *   The User uid to query for.
 *
 * @return array
 */
function dosomething_reportback_get_reportbacks($uid = NULL) {
  if (!$uid) {
    global $user;
    $uid = $user->uid;
  }
  return db_select('dosomething_reportback', 'rb')
    ->fields('rb', array('rbid'))
    ->condition('uid', $uid)
    ->orderBy('created', 'DESC')
    ->execute()
    ->fetchCol(0);
}


/**
 * Returns reportback total for a given node $nid.
 *
 * @param int $nid
 *   A node nid.
 * @param string $type
 *   Type of total to return.  Accepted values: 'quantity' or 'count'.
 * @param bool $filter_flagged
 *   Whether or not to exclude flagged reportbacks.
 *
 * @return int $result
 *  Either the total reportback count, or the sum of all reportback quantity values.
 */
function dosomething_reportback_get_reportback_total_by_nid($nid, $type = 'quantity', $filter_flagged = TRUE) {

  // Select all reportbacks for given $nid.
  $query = db_select('dosomething_reportback', 'rb')->condition('nid', $nid);
  // Prevents non-reviewed RB's from being added to total
  $query->isNotNull('promoted');

  if ($filter_flagged) {
    $query->condition('flagged', 0);
  }

  if ($type == 'quantity') {
    //@TODO: temporary hotfix to get hotmodule out, need to debug why this query is broken.
    return dosomething_helpers_get_variable('node', $nid, 'sum_rb_quantity');

    $query->addExpression('SUM(quantity)', 'quantity');
    $result = $query->execute()->fetchAll();
    $quantity = $result[0]->quantity;
    // dosomething_helpers_set_variable('node', $nid, 'sum_rb_quantity', $quantity);
    return $quantity;
  }
  elseif ($type == 'count') {
    $query->fields('rb', array('rbid'));
    return $query->execute()->rowCount();
  }
}


/**
 * Returns the total number of reportbacks with the override added to it.
 *
 * @param int $nid
*   A node nid.
 *
 * @return int $total
 *  Sum of all reportback quantities plus the override.
 */
 function dosomething_reportback_get_reportback_total_plus_override($nid) {
   return dosomething_reportback_get_reportback_total_by_nid($nid) + (int) dosomething_helpers_get_variable('node', $nid, 'sum_rb_quantity_override');
 }


/**
 * Returns total number of Reportbacks by status (promoted, approved, etc).
 *
 * @param int $nid
 *   Campaign node id.
 * @param string $status
 *   Reportback status (promoted, approved, etc).
 * @return int
 */
function dosomething_reportback_get_reportback_total_by_status($nid, $status) {
  $params = array();
  $params['nid'] = $nid;
  $params['status'] = $status;

  return dosomething_reportback_get_reportback_files_query_count($params);
}

/**
 * Returns total number of Reportback Items based on supplied set of filters.
 *
 * @param  array  $filters
 * @return int
 *
 * @TODO: update $cache->set() to allow specifying alternative expiration time.
 */
function dosomething_reportback_get_reportback_items_total_by_filters(array $filters = []) {
  $unnecessaryFilters = ['count', 'random', 'page', 'load_user', 'offset'];

  $filters = dosomething_helpers_unset_array_keys($filters, $unnecessaryFilters);

  $parameters = dosomething_helpers_convert_filters_to_url_parameters($filters);
  $parameters['cache'] = TRUE;

  $cache = new ApiCache();

  $total = $cache->get('reportback-items-tally', $parameters);

  if ($total) {
    $total = $total->data;
  }
  else {
    $total = dosomething_reportback_get_reportback_items_query($filters, TRUE);

    $cache->set('reportback-items-tally', $parameters, $total);
  }

  return (int) $total;
}

/**
 * Returns count of Reportbacks for a given node $uid.
 *
 * @param int $uid
 *   (optional) The User uid to get count of Reportbacks for.
 *   If not given, uses global $user->uid.
 *
 * @return int
 *   The number of Reportbacks for the User.
 */
function dosomething_reportback_get_count_by_uid($uid = NULL) {
  if ($uid == NULL) {
    global $user;
    $uid = $user->uid;
  }
  // Select all reportbacks for given $uid.
  $query = db_select('dosomething_reportback', 'rb')
    ->fields('rb', array('rbid'))
    ->condition('uid', $uid);
  return $query->execute()->rowCount();
}


/**
 * Return the reportback noun & verb for a campaign.
 *
 * @param int $nid
 *   A campaign node id.
 * @return obj $results
 *   An object containing reportback noun & verb
 */
function dosomething_reportback_get_noun_and_verb($nid) {
  global $language;

  $query = db_select('field_data_field_reportback_noun', 'noun')
    ->condition('noun.entity_id', $nid)
    ->condition('noun.language', $language->language);
  $query->addField('noun', 'field_reportback_noun_value', 'noun');
  $query->addField('verb', 'field_reportback_verb_value', 'verb');
  $query->join('field_data_field_reportback_verb', 'verb', 'noun.entity_id = verb.entity_id');
  $results = $query->execute()->fetch();

  return $results;
}


/**
 * Clear cache on dosomething_reportback table.
 */
function dosomething_reportback_cache_clear_all() {
  cache_clear_all('*', 'cache_dosomething_reportback', TRUE);
}


/**
 * Implements hook_flush_caches().
 */
function dosomething_reportback_flush_caches() {
  return array('cache_dosomething_reportback');
}


/**
 * Returns total number of results from a given RB Files query.
 *
 * @param array $params
 *   Associative array of query parameters.
 * @param bool $reset
 *   If TRUE, run SQL count query.
 *   If FALSE, use the Helper count variable if exists.
 * @return int
 */
function dosomething_reportback_get_reportback_files_query_count($params, $reset = FALSE) {
  $entity_type = NULL;

  // Name of helper variable which stores count for this status.
  $var_name = 'count_' . $params['status'];
  if (isset($params['nid'])) {
    $entity_type = 'node';
    $entity_id = $params['nid'];
  }
  elseif (isset($params['tid'])) {
    $entity_type = 'taxonomy_term';
    $entity_id = $params['tid'];
  }

  if ($entity_type && !$reset) {
    // Check if we have the count stored already.
    $count = dosomething_helpers_get_variable($entity_type, $entity_id, $var_name);

    if ($count === FALSE) {
      $reset = TRUE;
    }
    else {
      return $count;
    }
  }

  $query = dosomething_reportback_build_reportback_items_query($params);
  $result = $query->execute();
  $count = $result->rowCount();

  if ($entity_type && $reset) {
    dosomething_helpers_set_variable($entity_type, $entity_id, $var_name, $count);
  }

  return $count;
}

/**
 * Mark reportback as excluded.
 */
function dosomething_reportback_mark_reportback_as_excluded($fid) {
  db_update('dosomething_reportback_file')
    ->fields(array(
        'status' => 'excluded',
      )
    )
    ->condition('fid', $fid->fid)
    ->execute();

  $reportback = reportback_load($fid->rbid);

  if (empty($reportback)) {
    return;
  }

  // Get all reportback item files associated with reportback.
  $items = $reportback->getFids();
  $items = entity_load('reportback_item', $items);

  // Check each reportback item file to see if status is flagged.
  foreach ($items as $item) {
    $flagged_fids = [];

    if ($item->status === 'flagged') {
      array_push($flagged_fids, $item);
    }
  }

  // If there are no flagged reportback item files, change the reportback flagged status to 0.
  if (empty($flagged_fids)) {
    $reportback->flagged = 0;
    entity_save('reportback', $reportback);
  }
}

/**
 * Resets Reportback Count variables for given entity type and entity_id.
 */
function dosomething_reportback_reset_count($entity_type, $entity_id, $status = NULL) {
  $params = [];

  if ($entity_type == 'node') {
    $params['nid'] = $entity_id;
  }
  elseif ($entity_type == 'taxonomy_term') {
    $params['tid'] = $entity_id;
  }

  // If a status is provided, reset its count.
  if (isset($status)) {
    $params['status'] = $status;
    return dosomething_reportback_get_reportback_files_query_count($params, TRUE);
  }

  // Otherwise reset for all status counts.
  $status_values = dosomething_reportback_get_file_status_values();
  foreach ($status_values as $status) {
    $params['status'] = $status;
    dosomething_reportback_get_reportback_files_query_count($params, TRUE);
  }
}


/**
 * Returns array of all valid values for a Reportback File's status.
 */
function dosomething_reportback_get_file_status_values() {
  return array(
    'pending',
    'approved',
    'promoted',
    'excluded',
    'flagged',
  );
}


/**
 * Returns list of valid form options a Reportback File can be set to.
 */
function dosomething_reportback_get_file_status_options() {
  $keys = dosomething_reportback_get_file_status_values();
  $options = array();
  foreach ($keys as $name) {
    $options[$name] = t(ucfirst($name));
  }

  // Don't allow Pending as a form value.
  if (isset($options['pending'])) {
    unset($options['pending']);
  }

  return $options;
}


/**
 * Generates a new Reportback with Placekitten and Lorem ipsum.
 */
function dosomething_reportback_generate($nid = NULL, $num_reportbacks = 5) {
  global $user;

  // Load devel_generate module to get random Lorem ipsum's.
  module_load_include('inc', 'devel_generate', 'devel_generate');

  if ($num_reportbacks > 50) {
    return FALSE;
  }

  if (!$nid) {
    $nid = db_select("node", "n")
      ->fields("n", array("nid"))
      ->condition("type", "campaign")
      ->orderRandom()
      ->range(0,1)
      ->execute()
      ->fetchField();
  }

  // List of sites to grab images from.
  $generators = array(
    'placebear',
    'placecreature',
    'placekitten',
    'place-hoff',
  );

  for ($i = 0; $i < $num_reportbacks; $i++) {
    $values = array(
      'nid' => $nid,
      'uid' => $user->uid,
      'rbid' => 0,
      'caption' => devel_create_greeking(rand(1, 3)),
      'why_participated' => devel_create_greeking(rand(2, 20)),
      'quantity' => rand(2,800),
    );

    // Pick a site, any site.
    $random_key = array_rand($generators);
    $site = $generators[$random_key];

    // Pick an image, any image.
    $file_url = "http://" . $site . ".com/" . rand(300, 1000) . "/" . rand(300, 1000);

    // Save it.
    $file = dosomething_reportback_save_file_from_url($nid, $user->uid, $file_url);

    $values['fid'] = $file->fid;
    watchdog('dosomething_reportback', "Generated RB:" . json_encode($values));

    dosomething_reportback_save($values, $user);
  }
}


function dosomething_reportback_fix_null_values($nid = NULL) {
  if ($nid) {
    $results = dosomething_reportback_fix_null_values_per_nid_query($nid);
  }
  else {
    $results = dosomething_reportback_fix_all_null_values_query();
  }
  foreach ($results as $result) {
    $rb = reportback_load($result->rbid);
    // flagged reportback item
    if (in_array('flagged', explode(',', $result->stati))) {
      echo $result->rbid . ' has something flagged' .  "\n";
      $rb->flagged = 1;
      $rb->promoted = 0;
      $rb->save();
    }
    // promoted reportback item
    else if (in_array('promoted', explode(',', $result->stati))) {
      echo $result->rbid . ' has something with promotion' .  "\n";
      $rb->promoted = 1;
      $rb->flagged = 0;
      $rb->save();
    }
    // neither flagged or promoted
    else {
      $rb->promoted = 0;
      $rb->flagged = 0;
      $rb->save();
      echo $result->rbid . ' has nothing' .  "\n";
    }
  }
}

function dosomething_reportback_fix_null_values_per_nid_query($nid = NULL) {
  $results = db_query("SELECT rb.rbid, group_concat(rbf.fid) as fids, rb.flagged, rb.promoted, group_concat(rbf.status) as stati
                       FROM dosomething_reportback rb
                       INNER JOIN dosomething_reportback_file rbf on rb.rbid = rbf.rbid
                       WHERE rbf.status != 'pending'
                       AND rb.nid = $nid
                       AND rb.flagged is null
                       GROUP BY rb.rbid;");
  return $results;
}

function dosomething_reportback_fix_all_null_values_query() {
  $results = db_query("SELECT rb.rbid, group_concat(rbf.fid) as fids, rb.flagged, rb.promoted, group_concat(rbf.status) as stati
                       FROM dosomething_reportback rb
                       INNER JOIN dosomething_reportback_file rbf on rb.rbid = rbf.rbid
                       WHERE rbf.status != 'pending'
                       AND rb.flagged is null
                       GROUP BY rb.rbid;");
  return $results;
}
